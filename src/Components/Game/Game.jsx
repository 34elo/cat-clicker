import React, {useEffect, useState} from "react";
import "./game.css";

import happyCat from './assets/happy.webp'
import neutralCat from './assets/neutral.webp'
import sadCat from './assets/sad.webp'
import ModalWindow from "./ModalWindow.jsx";

// –û–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫–æ—à–µ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
const cats = {
    sad: sadCat,
    neutral: neutralCat,
    happy: happyCat,
};

// –£—Ä–æ–≤–Ω–∏ —Å –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (—Ü–≤–µ—Ç, –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å)
const levels = {
    1: {
        level: 1,
        multiplicator: 1,
        color: '#5A3E1B', // –î–µ—Ä–µ–≤—è–Ω–Ω—ã–π (—Å—Ç–∞—Ä—Ç–æ–≤—ã–π)
        cost: 100,
        shadow: '0 0 20px 5px rgba(90, 62, 27, 0.8)'
    },
    2: {
        level: 2,
        multiplicator: 5,
        color: '#A6A6A6', // –°–µ—Ä–µ–±—Ä—è–Ω—ã–π –±–ª–µ—Å–∫
        cost: 500,
        shadow: '0 0 20px 5px rgba(166, 166, 166, 0.8)'
    },
    3: {
        level: 3,
        multiplicator: 10,
        color: '#FFD700', // –ö–æ—Ä–æ–ª–µ–≤—Å–∫–æ–µ –∑–æ–ª–æ—Ç–æ
        cost: 2500,
        shadow: '0 0 20px 5px rgba(255, 215, 0, 0.8)'
    },
    4: {
        level: 4,
        multiplicator: 20,
        color: '#007F5F', // –ò–∑—É–º—Ä—É–¥–Ω—ã–π —Å–≤–µ—Ç
        cost: 7500,
        shadow: '0 0 20px 5px rgba(0, 127, 95, 0.8)'
    },
    5: {
        level: 5,
        multiplicator: 35,
        color: '#6D3E91', // –ê–º–µ—Ç–∏—Å—Ç–æ–≤—ã–π –±–ª–µ—Å–∫
        cost: 20000,
        shadow: '0 0 20px 5px rgba(109, 62, 145, 0.8)'
    },
    6: {
        level: 6,
        multiplicator: 50,
        color: '#FF512F', // –õ–∞–≤–∞ & —Ä–æ–∑–æ–≤—ã–π –Ω–µ–æ–Ω
        cost: 50000,
        shadow: '0 0 20px 5px rgba(255, 81, 47, 0.8)'
    },
    7: {
        level: 7,
        multiplicator: 75,
        color: '#1E3C72', // –°–∞–ø—Ñ–∏—Ä–æ–≤–∞—è –≥–ª—É–±–∏–Ω–∞
        cost: 125000,
        shadow: '0 0 20px 5px rgba(30, 60, 114, 0.8)'
    },
    8: {
        level: 8,
        multiplicator: 100,
        color: '#D31027', // –†—É–±–∏–Ω–æ–≤—ã–π –∑–∞–∫–∞—Ç
        cost: 250000,
        shadow: '0 0 20px 5px rgba(211, 16, 39, 0.8)'
    },
    9: {
        level: 9,
        multiplicator: 150,
        color: '#E5E4E2', // –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –±–ª–µ—Å–∫
        cost: 500000,
        shadow: '0 0 20px 5px rgba(229, 228, 226, 0.8)'
    },
    10: {
        level: 10,
        multiplicator: 250,
        color: '#4CA1AF', // –õ–µ–¥—è–Ω–æ–π –∞–ª–º–∞–∑
        cost: 1_000_000,
        shadow: '0 0 20px 5px rgba(76, 161, 175, 0.8)'
    },
    11: {
        level: 11,
        multiplicator: 400,
        color: '#6A3093', // –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–∏–æ–ª–µ—Ç
        cost: 2_500_000,
        shadow: '0 0 20px 5px rgba(106, 48, 147, 0.8)'
    },
    12: {
        level: 12,
        multiplicator: 600,
        color: '#FF7E5F', // –û—Ä–∞–Ω–∂–µ–≤—ã–π –∑–∞–∫–∞—Ç
        cost: 5_000_000,
        shadow: '0 0 20px 5px rgba(255, 126, 95, 0.8)'
    },
    13: {
        level: 13,
        multiplicator: 900,
        color: '#0575E6', // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —à—Ç–æ—Ä–º
        cost: 10_000_000,
        shadow: '0 0 20px 5px rgba(5, 117, 230, 0.8)'
    },
    14: {
        level: 14,
        multiplicator: 1200,
        color: '#7F00FF', // –ú–∞–≥–∏—á–µ—Å–∫–∞—è –∞—É—Ä–∞
        cost: 25_000_000,
        shadow: '0 0 20px 5px rgba(127, 0, 255, 0.8)'
    },
    15: {
        level: 15,
        multiplicator: 2000,
        color: '#F7971E', // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å–æ–ª–Ω–µ—á–Ω—ã–π
        cost: 'max',
        shadow: '0 0 20px 5px rgba(247, 151, 30, 0.8)'
    }
};

export default function Game() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º useState –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    const [coins, setCoins] = useState(localStorage.getItem('coins') ? parseInt(localStorage.getItem('coins')) : 0);
    const [feed, setFeed] = useState(50); // –°—ã—Ç–æ—Å—Ç—å –∫–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50%
    const [status, setStatus] = useState(1); // –°—Ç–∞—Ç—É—Å –∫–æ—Ç–∞ (—Å—á–∞—Å—Ç–ª–∏–≤—ã–π, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∏ —Ç.–¥.)
    const [error, setError] = useState(null); // –î–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫
    const [currentCat, setCurrentCat] = useState(cats.neutral); // –ö–æ—à–∫–∞ –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    const [particles, setParticles] = useState([]); // –ß–∞—Å—Ç–∏—Ü—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const [level, setLevel] = useState(levels[localStorage.getItem('level')] ? levels[localStorage.getItem('level')] : levels[1]); // –£—Ä–æ–≤–µ–Ω—å –∫–æ—Ç–∞
    const [open, setOpen] = useState(false); // –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –µ–¥—ã –¥–ª—è –∫–æ—Ç–∞
    function buyFeed() {
        if (coins < 10) { // –ï—Å–ª–∏ –º–æ–Ω–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
            setError("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç");
        } else if (feed + 10 > 100) { // –ï—Å–ª–∏ –∫–æ—Ç —É–∂–µ —Å—ã—Ç
            setError("–ö–æ—Ç —Å—ã—Ç");
        } else {
            setFeed(feed + 10); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—ã—Ç–æ—Å—Ç—å
            setCoins(coins - 10); // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
        }
    }

    // –•—É–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—ã—Ç–æ—Å—Ç–∏
    useEffect(() => {
        if (feed > 70) {
            setCurrentCat(cats.happy); // –ö–æ—Ç —Å—á–∞—Å—Ç–ª–∏–≤—ã–π
            setStatus(2); // –£—Ä–æ–≤–µ–Ω—å —Å—á–∞—Å—Ç—å—è
        } else if (feed < 40) {
            setCurrentCat(cats.sad); // –ö–æ—Ç –≥—Ä—É—Å—Ç–Ω—ã–π
            setStatus(0.2); // –£—Ä–æ–≤–µ–Ω—å –≥—Ä—É—Å—Ç–∏
        } else {
            setCurrentCat(cats.neutral); // –ö–æ—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
            setStatus(1); // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        }
    }, [feed, coins]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Å—ã—Ç–æ—Å—Ç–∏ –∏ –º–æ–Ω–µ—Ç

    // –•—É–∫ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—ã—Ç–æ—Å—Ç–∏ –∫–æ—Ç–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    useEffect(() => {
        const hungerInterval = setInterval(() => {
            setFeed((prev) => (prev > 0 ? prev - 1 : 0)); // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ —É–º–µ–Ω—å—à–∞–µ–º —Å—ã—Ç–æ—Å—Ç—å
        }, 5000);
        return () => clearInterval(hungerInterval); // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç
    function doMoney() {
        let mod = level.multiplicator; // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        if (level.multiplicator * status >= 1) {
            mod = level.multiplicator * status; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ç–∞
        }
        setCoins(coins + mod); // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
        const newParticle = {
            id: Date.now(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü
            left: Math.random() * 100 + '%', // –ü–æ–∑–∏—Ü–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            top: Math.random() * 100 + '%', // –ü–æ–∑–∏—Ü–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            number: mod // –ß–∏—Å–ª–æ –Ω–∞ —á–∞—Å—Ç–∏—Ü–µ
        };
        setError(null); // –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞

        setParticles([...particles, newParticle]); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç–∏—Ü—É

        setTimeout(() => {
            setParticles((prevParticles) =>
                prevParticles.filter((particle) => particle.id !== newParticle.id) // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—É —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
            );
        }, 1500);
    }

    // –•—É–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–µ—Ç –∏ —É—Ä–æ–≤–Ω—è –≤ localStorage
    useEffect(() => {
        localStorage.setItem('coins', coins);
        localStorage.setItem('level', level.level);
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ—Ç–∞
    function upLevel() {
        if (level.cost === 'max') {
            setError('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å'); // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π
        } else if (coins >= level.cost) {
            setLevel(levels[level.level + 1]); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
            setCoins(coins - level.cost); // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
        } else {
            setError('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç'); // –ï—Å–ª–∏ –º–æ–Ω–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
        }
    }

    return (
        <div style={{maxHeight: '80vh'}}>
            {
                open ? <ModalWindow coins={coins} setOpen={setOpen} setCoins={setCoins}></ModalWindow> :
                    <div className="game-container">
                        <div className="status-bar">
                            <p>ü™ô <br/> –ú–æ–Ω–µ—Ç–∫–∏: {coins}</p>
                            <p>üçó <br/> –°—ã—Ç–æ—Å—Ç—å: {feed}%</p>
                        </div>
                        <p style={{
                            fontSize: '20px',
                            color: level.color,
                            marginTop: '10px',
                            marginBottom: '10px'
                        }}>
                            {error ? error : '–ñ–º–∏ –Ω–∞ –∫–æ—Ç–∏–∫–∞'}</p>
                        <div className="cat-container">

                            <img

                                style={{
                                    minHeight: "150px",
                                    minWidth: "200px",
                                    maxHeight: "200px",
                                    maxWidth: "200px",
                                    border: '10px solid',
                                    borderRadius: '25px',
                                    marginTop: '30px',
                                    borderColor: level.color,
                                    margin: 0,
                                    boxShadow: level.shadow,
                                }}
                                src={currentCat} // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—à–∫—É
                                alt="–ö–æ—à–µ—á–∫–∞"
                                onClick={doMoney} // –ü—Ä–∏ –∫–ª–∏–∫–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
                                className="pet"
                            />
                            {particles.map((particle) => (
                                <div
                                    key={particle.id}
                                    className="particle"
                                    style={{
                                        color: level.color,
                                        left: particle.left,
                                        top: particle.top,
                                    }}
                                >
                                    {particle.number}
                                </div>
                            ))}
                        </div>
                        <div className="buttons-container">
                            <button onClick={buyFeed}>–ö—É–ø–∏—Ç—å –ø–æ–∫—É—à–∞—Ç—å</button>
                            <button onClick={upLevel}>–£–ª—É—á—à–∏—Ç—å –∫–æ—Ç–∞ ({level.cost})</button>
                        </div>
                    </div>}
        </div>
    );
}
